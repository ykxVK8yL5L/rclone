---
# Github Actions build for rclone
# 复制Plugins下的文件加入自定义的backend

name: 发布到Release

on: 
  workflow_dispatch:
    inputs:
      manual:
        description: Manual run (bypass default conditions)
        type: boolean
        default: true

jobs:
  build:
    if: inputs.manual || (github.repository == 'rclone/rclone' && (github.event_name != 'pull_request' || github.event.pull_request.head.repo.full_name != github.event.pull_request.base.repo.full_name))
    timeout-minutes: 60
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        job_name: ['linux', 'linux_386', 'mac_amd64', 'mac_arm64', 'windows', 'other_os', 'go1.24']

        include:
          - job_name: linux
            os: ubuntu-latest
            go: '>=1.25.0-rc.1'
            gotags: cmount
            build_flags: '-include "^linux/"'
            check: true
            quicktest: false
            racequicktest: false
            librclonetest: false
            deploy: true
            compile_all: true

          - job_name: linux_386
            os: ubuntu-latest
            go: '>=1.25.0-rc.1'
            goarch: 386
            gotags: cmount
            quicktest: false
            compile_all: true

          - job_name: mac_amd64
            os: macos-latest
            go: '>=1.25.0-rc.1'
            gotags: 'cmount'
            build_flags: '-include "^darwin/amd64" -cgo'
            quicktest: false
            racequicktest: false
            deploy: true
            compile_all: true

          - job_name: mac_arm64
            os: macos-latest
            go: '>=1.25.0-rc.1'
            gotags: 'cmount'
            build_flags: '-include "^darwin/arm64" -cgo -macos-arch arm64 -cgo-cflags=-I/usr/local/include -cgo-ldflags=-L/usr/local/lib'
            deploy: true
            compile_all: true

          - job_name: windows
            os: windows-latest
            go: '>=1.25.0-rc.1'
            gotags: cmount
            cgo: '0'
            build_flags: '-include "^windows/"'
            build_args: '-buildmode exe'
            quicktest: false
            deploy: true
            compile_all: true

          - job_name: other_os
            os: ubuntu-latest
            go: '>=1.25.0-rc.1'
            build_flags: '-exclude "^(windows/|darwin/|linux/)"'
            compile_all: true
            deploy: true

          - job_name: go1.24
            os: ubuntu-latest
            go: '1.24'
            quicktest: false
            racequicktest: false
            compile_all: true

    name: ${{ matrix.job_name }}

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Install Go
        uses: actions/setup-go@v6
        with:
          go-version: ${{ matrix.go }}
          check-latest: true

      - name: Get plugin folder names
        id: get_plugins
        run: |
          # 获取plugins目录下的文件夹名
          plugin_dirs=$(find plugins -mindepth 1 -maxdepth 1 -type d -exec basename {} \;)
          echo "Plugin directories: $plugin_dirs"
          
          # 将plugin_dirs保存到输出变量中
          echo "::set-output name=plugin_dirs::$plugin_dirs"

      - name: Copy plugin files to backend
        run: |
          # 从前一步获取插件目录列表
          plugin_dirs="${{ steps.get_plugins.outputs.plugin_dirs }}"
          IFS=' ' read -r -a plugins_array <<< "$plugin_dirs"
          
          # 复制所有插件文件夹内容到backend目录
          for dir in "${plugins_array[@]}"; do
            echo "Copying $dir to backend"
            cp -r "plugins/$dir" "backend/"
          done

      - name: Update all.go file
        run: |
          # 从前一步获取插件目录列表
          plugin_dirs="${{ steps.get_plugins.outputs.plugin_dirs }}"
          IFS=' ' read -r -a plugins_array <<< "$plugin_dirs"
          
          # 插入import语句到all.go倒数第二行
          gofile="backend/all/all.go"
          for dir in "${plugins_array[@]}"; do
            import_line="	_ \"github.com/rclone/rclone/backend/$dir\""
            echo "Adding import statement for $dir"
            #在倒数第二行插入import语句
            awk -v insert="$import_line" "{print} NR==$(wc -l < $gofile)-1{print insert}" $gofile > tmp && mv tmp $gofile
          done

      - name: Set environment variables
        run: |
          echo 'GOTAGS=${{ matrix.gotags }}' >> $GITHUB_ENV
          echo 'BUILD_FLAGS=${{ matrix.build_flags }}' >> $GITHUB_ENV
          echo 'BUILD_ARGS=${{ matrix.build_args }}' >> $GITHUB_ENV
          if [[ "${{ matrix.goarch }}" != "" ]]; then echo 'GOARCH=${{ matrix.goarch }}' >> $GITHUB_ENV ; fi
          if [[ "${{ matrix.cgo }}" != "" ]]; then echo 'CGO_ENABLED=${{ matrix.cgo }}' >> $GITHUB_ENV ; fi

      - name: Install Libraries on Linux
        run: |
          sudo modprobe fuse
          sudo chmod 666 /dev/fuse
          sudo chown root:$USER /etc/fuse.conf
          sudo apt-get update
          sudo apt-get install -y fuse3 libfuse-dev rpm pkg-config git-annex git-annex-remote-rclone nfs-common
        if: matrix.os == 'ubuntu-latest'

      - name: Install Libraries on macOS
        run: |
          # https://github.com/Homebrew/brew/issues/15621#issuecomment-1619266788
          # https://github.com/orgs/Homebrew/discussions/4612#discussioncomment-6319008
          unset HOMEBREW_NO_INSTALL_FROM_API
          brew untap --force homebrew/core
          brew untap --force homebrew/cask
          brew update
          brew install --cask macfuse
          brew install git-annex git-annex-remote-rclone
        if: matrix.os == 'macos-latest'

      - name: Install Libraries on Windows
        shell: powershell
        run: |
          $ProgressPreference = 'SilentlyContinue'
          choco install -y winfsp zip
          echo "CPATH=C:\Program Files\WinFsp\inc\fuse;C:\Program Files (x86)\WinFsp\inc\fuse" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          if ($env:GOARCH -eq "386") {
            choco install -y mingw --forcex86 --force
            echo "C:\\ProgramData\\chocolatey\\lib\\mingw\\tools\\install\\mingw32\\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          }
          # Copy mingw32-make.exe to make.exe so the same command line
          # can be used on Windows as on macOS and Linux
          $path = (get-command mingw32-make.exe).Path
          Copy-Item -Path $path -Destination (Join-Path (Split-Path -Path $path) 'make.exe')
        if: matrix.os == 'windows-latest'

      - name: Print Go version and environment
        run: |
          printf "Using go at: $(which go)\n"
          printf "Go version: $(go version)\n"
          printf "\n\nGo environment:\n\n"
          go env
          printf "\n\nRclone environment:\n\n"
          make vars
          printf "\n\nSystem environment:\n\n"
          env

      - name: Build rclone
        run: |
          make

      - name: Rclone version
        run: |
          rclone version

      - name: Run tests
        run: |
          make quicktest
        if: matrix.quicktest

      - name: Race test
        run: |
          make racequicktest
        if: matrix.racequicktest

      - name: Run librclone tests
        run: |
          make -C librclone/ctest test
          make -C librclone/ctest clean
          librclone/python/test_rclone.py
        if: matrix.librclonetest

      - name: Compile all architectures test
        run: |
          make
          make compile_all
        if: matrix.compile_all

      - name: Deploy built binaries
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then make release_dep_linux ; fi
          make ci_beta
        env:
          RCLONE_CONFIG_PASS: ${{ secrets.RCLONE_CONFIG_PASS }}
        # working-directory: '$(modulePath)'
        # Deploy binaries if enabled in config && not a PR && not a fork
        if: env.RCLONE_CONFIG_PASS != '' && matrix.deploy && github.head_ref == '' && github.repository == 'rclone/rclone'

      - name: 编译并上传到release
        run: |
          make upload_github
        env:
          GH_TOKEN: ${{ secrets.MY_TOKEN }}

